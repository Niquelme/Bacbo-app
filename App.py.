import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder

st.set_page_config(page_title="Bac Bo Predictor", layout="centered")
st.title("游댩 Previs칚o do Bac Bo com IA")

# Emojis para representar os resultados
cores = {'vermelho': '游댮', 'azul': '游댯', 'amarelo': '游리'}

# Inicializa칞칚o do hist칩rico
if 'historico' not in st.session_state:
    st.session_state.historico = []

# Entrada do novo resultado
opcao = st.selectbox("Resultado mais recente:", ["", "vermelho", "azul", "amarelo"])
if opcao:
    st.session_state.historico.append(opcao)

# Mostrar hist칩rico com emojis
st.subheader("Hist칩rico")
if st.session_state.historico:
    st.write(" ".join([cores[c] for c in st.session_state.historico]))
else:
    st.write("Nenhum resultado ainda.")

# An치lise simples
def analyze_sequence(seq):
    contagem = Counter(seq)
    st.write(f"Contagem: {dict(contagem)}")
    df = pd.DataFrame.from_dict(contagem, orient='index', columns=['Frequ칡ncia'])
    df.plot(kind='bar', legend=False, color=['red', 'blue', 'gold'])
    st.pyplot(plt.gcf())
    plt.clf()

# Previs칚o usando IA
def prever(historico, window=10):
    if len(historico) <= window:
        return "Aguardando mais dados..."
    
    data = []
    labels = []
    for i in range(len(historico) - window):
        data.append(historico[i:i + window])
        labels.append(historico[i + window])

    df_X = pd.DataFrame(data, columns=[f'p{i}' for i in range(window)])
    df_X = pd.get_dummies(df_X, prefix_sep='_')
    le = LabelEncoder().fit(['vermelho', 'azul', 'amarelo'])
    y = le.transform(labels)

    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(df_X, y)

    last_seq = historico[-window:]
    df_input = pd.DataFrame([last_seq], columns=[f'p{i}' for i in range(window)])
    df_input = pd.get_dummies(df_input, prefix_sep='_')
    df_input = df_input.reindex(columns=df_X.columns, fill_value=0)

    pred = model.predict(df_input)[0]
    return le.inverse_transform([pred])[0]

# Mostrar an치lise e previs칚o
if len(st.session_state.historico) >= 3:
    analyze_sequence(st.session_state.historico)
if len(st.session_state.historico) >= 10:
    previsao = prever(st.session_state.historico)
    st.success(f"Previs칚o do pr칩ximo: {cores.get(previsao, previsao)}")
